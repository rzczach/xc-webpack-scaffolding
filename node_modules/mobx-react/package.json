{
  "_args": [
    [
      {
        "raw": "mobx-react",
        "scope": null,
        "escapedName": "mobx-react",
        "name": "mobx-react",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/rzc/xcworld/xc-webpack-scaffolding"
    ]
  ],
  "_cnpm_publish_time": 1544624541026,
  "_from": "mobx-react",
  "_hasShrinkwrap": false,
  "_id": "mobx-react@5.4.3",
  "_location": "/mobx-react",
  "_nodeVersion": "10.14.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/mobx-react_5.4.3_1544624540832_0.7781513127837307"
  },
  "_npmUser": {
    "name": "mweststrate",
    "email": "mweststrate@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "mobx-react",
    "scope": null,
    "escapedName": "mobx-react",
    "name": "mobx-react",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "http://registry.npm.taobao.org/mobx-react/download/mobx-react-5.4.3.tgz",
  "_shasum": "6709b7dd89670c40e9815914ac2ca49cc02bfb47",
  "_shrinkwrap": null,
  "_spec": "mobx-react",
  "_where": "/Users/rzc/xcworld/xc-webpack-scaffolding",
  "author": {
    "name": "Michel Weststrate"
  },
  "bugs": {
    "url": "https://github.com/mobxjs/mobx/issues"
  },
  "dependencies": {
    "hoist-non-react-statics": "^3.0.0",
    "react-lifecycles-compat": "^3.0.2"
  },
  "description": "React bindings for MobX. Create fully reactive components.",
  "devDependencies": {
    "@babel/core": "^7.1.0",
    "@babel/plugin-proposal-class-properties": "^7.1.0",
    "@babel/plugin-proposal-decorators": "^7.1.0",
    "@babel/plugin-transform-react-jsx": "^7.0.0",
    "@babel/preset-env": "^7.1.0",
    "@types/create-react-class": "^15.6.0",
    "@types/node": "^10.0.0",
    "@types/prop-types": "^15.5.2",
    "@types/react": "^16.0.13",
    "@types/react-dom": "^16.0.1",
    "babel-core": "^7.0.0-bridge.0",
    "babel-jest": "^23.6.0",
    "create-react-class": "^15.6.2",
    "enzyme": "^3.3.0",
    "enzyme-adapter-react-16": "^1.0.0",
    "husky": "^1.0.0",
    "jest": "^23.6.0",
    "jest-environment-jsdom": "^23.4.0",
    "lint-staged": "^7.0.5",
    "lodash": "^4.17.4",
    "mobx": "^5.0.0",
    "opn-cli": "^3.1.0",
    "prettier": "^1.7.2",
    "prop-types": "^15.6.0",
    "react": "^16.6.3",
    "react-dom": "^16.6.3",
    "react-test-renderer": "^16.6.3",
    "regenerator-runtime": "^0.12.1",
    "request": "^2.83.0",
    "rollup": "^0.66.2",
    "rollup-plugin-alias": "^1.3.0",
    "rollup-plugin-babel": "^4.0.3",
    "rollup-plugin-commonjs": "^9.0.0",
    "rollup-plugin-filesize": "^5.0.0",
    "rollup-plugin-node-resolve": "^3.0.0",
    "rollup-plugin-replace": "^2.1.0",
    "rollup-plugin-uglify": "^6.0.0",
    "shelljs": "^0.8.2",
    "shx": "^0.3.2",
    "typescript": "^2.6.0"
  },
  "directories": {},
  "dist": {
    "shasum": "6709b7dd89670c40e9815914ac2ca49cc02bfb47",
    "size": 179592,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/mobx-react/download/mobx-react-5.4.3.tgz"
  },
  "gitHead": "fed51490190aa80cae3a59bf4d32e19d98aec105",
  "homepage": "https://mobxjs.github.io/mobx",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "jest": {
    "testURL": "http://127.0.0.1/"
  },
  "jsnext:main": "index.module.js",
  "keywords": [
    "mobx",
    "mobservable",
    "react-component",
    "react",
    "reactjs",
    "reactive"
  ],
  "license": "MIT",
  "lint-staged": {
    "*.{ts,js}": [
      "prettier --write",
      "git add"
    ]
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "andykog",
      "email": "mail@andykog.com"
    },
    {
      "name": "eshenbrener",
      "email": "strate@yandex.ru"
    },
    {
      "name": "mweststrate",
      "email": "mweststrate@gmail.com"
    }
  ],
  "module": "index.module.js",
  "name": "mobx-react",
  "optionalDependencies": {},
  "peerDependencies": {
    "mobx": "^4.0.0 || ^5.0.0",
    "react": "^0.13.0 || ^0.14.0 || ^15.0.0 || ^16.0.0"
  },
  "publish_time": 1544624541026,
  "react-native": "native.js",
  "readme": "# mobx-react\r\n\r\n[![Build Status](https://travis-ci.org/mobxjs/mobx-react.svg?branch=master)](https://travis-ci.org/mobxjs/mobx-react)\r\n[![Join the chat at https://gitter.im/mobxjs/mobx](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/mobxjs/mobx?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![CDNJS](https://img.shields.io/cdnjs/v/mobx-react.svg)](https://cdnjs.com/libraries/mobx-react)\r\n\r\nPackage with React component wrapper for combining React with MobX.\r\nExports the `observer` decorator and some development utilities.\r\nFor documentation, see the [MobX](https://mobxjs.github.io/mobx) project.\r\nThis package supports both React and React Native.\r\n\r\n## Installation\r\n\r\n`npm install mobx-react --save`\r\n\r\nOr CDN: https://unpkg.com/mobx-react (namespace: `mobxReact`)\r\n\r\n```javascript\r\nimport { observer } from \"mobx-react\"\r\n// - or, for custom renderers without DOM: -\r\nimport { observer } from \"mobx-react/custom\"\r\n```\r\n\r\nThis package provides the bindings for MobX and React.\r\nSee the [official documentation](http://mobxjs.github.io/mobx/intro/overview.html) for how to get started.\r\n\r\nIf you are using [React hooks](https://reactjs.org/docs/hooks-intro.html) with latest React 16.7 and you like living on the bleeding edge then have a look at the new [mobx-react-lite](https://github.com/mobxjs/mobx-react-lite).\r\n\r\n## Boilerplate projects that use mobx-react\r\n\r\n*   Minimal MobX, React, ES6, JSX, Hot reloading: [MobX-React-Boilerplate](https://github.com/mobxjs/mobx-react-boilerplate)\r\n*   TodoMVC MobX, React, ES6, JSX, Hot reloading: [MobX-React-TodoMVC](https://github.com/mobxjs/mobx-react-todomvc)\r\n*   Minimal MobX, React, Typescript, TSX: [MobX-React-Typescript-Boilerplate](https://github.com/mobxjs/mobx-react-typescript-boilerplate)\r\n*   Minimal MobX, React, ES6(babel), JSPM with hot reloading modules:\r\n    [jspm-react](https://github.com/capaj/jspm-react)\r\n*   React Native Counter: [Mobx-React-Native-Counter](https://github.com/bartonhammond/mobx-react-native-counter)\r\n\r\n## API documentation\r\n\r\n### observer(componentClass)\r\n\r\nFunction (and decorator) that converts a React component definition, React component class or stand-alone render function into a reactive component, which tracks which observables are used by `render` and automatically re-renders the component when one of these values changes.\r\n\r\nApart from observables passed/injected in or defined inside an `observer` component, `this.props` and `this.state` are also observables themselves, so the component will react to all changes in props and state that are  used by `render`.\r\n\r\nSee the [MobX](https://mobxjs.github.io/mobx/refguide/observer-component.html) documentation for more details.\r\n\r\n```javascript\r\nimport { observer } from \"mobx-react\"\r\n\r\n// ---- ES5 syntax ----\r\n\r\nconst TodoView = observer(\r\n    React.createClass({\r\n        displayName: \"TodoView\",\r\n        render() {\r\n            return <div>{this.props.todo.title}</div>\r\n        }\r\n    })\r\n)\r\n\r\n// ---- ES6 syntax ----\r\n\r\nconst TodoView = observer(\r\n    class TodoView extends React.Component {\r\n        render() {\r\n            return <div>{this.props.todo.title}</div>\r\n        }\r\n    }\r\n)\r\n\r\n// ---- ESNext syntax with decorators ----\r\n\r\n@observer\r\nclass TodoView extends React.Component {\r\n    render() {\r\n        return <div>{this.props.todo.title}</div>\r\n    }\r\n}\r\n\r\n// ---- or just use a stateless component function: ----\r\n\r\nconst TodoView = observer(({ todo }) => <div>{todo.title}</div>)\r\n```\r\n\r\n### `Observer`\r\n\r\n`Observer` is a React component, which applies `observer` to an anonymous region in your component.\r\nIt takes as children a single, argumentless function which should return exactly one React component.\r\nThe rendering in the function will be tracked and automatically re-rendered when needed.\r\nThis can come in handy when needing to pass render function to external components (for example the React Native listview), or if you\r\ndislike the `observer` decorator / function.\r\n\r\n```javascript\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.person.name}\r\n                <Observer>{() => <div>{this.props.person.name}</div>}</Observer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst person = observable({ name: \"John\" })\r\n\r\nReact.render(<App person={person} />, document.body)\r\nperson.name = \"Mike\" // will cause the Observer region to re-render\r\n```\r\n\r\nIn case you are a fan of render props, you can use that instead of children. Be advised, that you cannot use both approaches at once, children have a precedence.\r\nExample\r\n\r\n```javascript\r\nclass App extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.person.name}\r\n                <Observer render={() => <div>{this.props.person.name}</div>} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst person = observable({ name: \"John\" })\r\n\r\nReact.render(<App person={person} />, document.body)\r\nperson.name = \"Mike\" // will cause the Observer region to re-render\r\n```\r\n\r\n### Global error handler with `onError`\r\n\r\nIf a component throws an error, this logs to the console but does not 'crash' the app, so it might go unnoticed.\r\nFor this reason it is possible to attach a global error handler using `onError` to intercept any error thrown in the render of an `observer` component.\r\nThis can be used to hook up any client side error collection system.\r\n\r\n```javascript\r\nimport { onError } from \"mobx-react\"\r\n\r\nonError(error => {\r\n    console.log(error)\r\n})\r\n```\r\n\r\n### Server Side Rendering with `useStaticRendering`\r\n\r\nWhen using server side rendering, normal lifecycle hooks of React components are not fired, as the components are rendered only once.\r\nSince components are never unmounted, `observer` components would in this case leak memory when being rendered server side.\r\nTo avoid leaking memory, call `useStaticRendering(true)` when using server side rendering.\r\n\r\n```javascript\r\nimport { useStaticRendering } from \"mobx-react\"\r\n\r\nuseStaticRendering(true);\r\n```\r\n\r\nThis makes sure the component won't try to react to any future data changes.\r\n\r\n### Which components should be marked with `observer`?\r\n\r\nThe simple rule of thumb is: _all components that render observable data_.\r\nIf you don't want to mark a component as observer, for example to reduce the dependencies of a generic component package, make sure you only pass it plain data.\r\n\r\n### Enabling decorators (optional)\r\n\r\nDecorators are currently a stage-2 ESNext feature. How to enable them is documented [here](https://github.com/mobxjs/mobx#enabling-decorators-optional).\r\n\r\n### Should I still use smart and dumb components?\r\n\r\nSee this [thread](https://www.reddit.com/r/reactjs/comments/4vnxg5/free_eggheadio_course_learn_mobx_react_in_30/d61oh0l).\r\nTL;DR: the conceptual distinction makes a lot of sense when using MobX as well, but use `observer` on all components.\r\n\r\n### About `shouldComponentUpdate`\r\n\r\nWhen using `@observer` on a component, don't implement `shouldComponentUpdate`, as it will override the default implementation that MobX provides.\r\nWhen using mobx-react, you should in general not need to write an `sCU` (in our entire Mendix code base we have none). If you really need to implement `sCU`, split the component into two, a reactive and non-reactive (with the `sCU`) part, or use `<Observer>` sections instead of `observer` on the entire component.\r\n\r\nSimilarly, `PureComponent` should not be combined with `observer`. As pure components are supposed to be dumb and never update themselves automatically, but only by getting passed in new props from the parent. `observer` is the opposite, it makes components smart and dependency aware, allowing them to update without the parents even needing to be aware of the change.\r\n\r\n### `componentWillReact` (lifecycle hook)\r\n\r\nReact components usually render on a fresh stack, so that makes it often hard to figure out what _caused_ a component to re-render.\r\nWhen using `mobx-react` you can define a new life cycle hook, `componentWillReact` (pun intended) that will be triggered when a component is scheduled to be re-rendered because\r\ndata it observes has changed. This makes it easy to trace renders back to the action that caused the rendering.\r\n\r\n```javascript\r\nimport { observer } from \"mobx-react\"\r\n\r\n@observer\r\nclass TodoView extends React.Component {\r\n    componentWillReact() {\r\n        console.log(\"I will re-render, since the todo has changed!\")\r\n    }\r\n\r\n    render() {\r\n        return <div>{this.props.todo.title}</div>\r\n    }\r\n}\r\n```\r\n\r\n*   `componentWillReact` doesn't take arguments\r\n*   `componentWillReact` won't fire before the initial render (use use `componentDidMount` or `constructor` instead)\r\n\r\n### `PropTypes`\r\n\r\nMobX-react provides the following additional `PropTypes` which can be used to validate against MobX structures:\r\n\r\n*   `observableArray`\r\n*   `observableArrayOf(React.PropTypes.number)`\r\n*   `observableMap`\r\n*   `observableObject`\r\n*   `arrayOrObservableArray`\r\n*   `arrayOrObservableArrayOf(React.PropTypes.number)`\r\n*   `objectOrObservableObject`\r\n\r\nUse `import { PropTypes } from \"mobx-react\"` to import them, then use for example `PropTypes.observableArray`\r\n\r\n### `Provider` and `inject`\r\n\r\n`Provider` is a component that can pass stores (or other stuff) using React's context mechanism to child components.\r\nThis is useful if you have things that you don't want to pass through multiple layers of components explicitly.\r\n\r\n`inject` can be used to pick up those stores. It is a higher order component that takes a list of strings and makes those stores available to the wrapped component.\r\n\r\nExample (based on the official [context docs](https://facebook.github.io/react/docs/context.html#passing-info-automatically-through-a-tree)):\r\n\r\n```javascript\r\n@inject(\"color\")\r\n@observer\r\nclass Button extends React.Component {\r\n    render() {\r\n        return <button style={{ background: this.props.color }}>{this.props.children}</button>\r\n    }\r\n}\r\n\r\nclass Message extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.text} <Button>Delete</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass MessageList extends React.Component {\r\n    render() {\r\n        const children = this.props.messages.map(message => <Message text={message.text} />)\r\n        return (\r\n            <Provider color=\"red\">\r\n                <div>{children}</div>\r\n            </Provider>\r\n        )\r\n    }\r\n}\r\n```\r\n\r\nNotes:\r\n\r\n*   If a component asks for a store and receives a store via a property with the same name, the property takes precedence. Use this to your advantage when testing!\r\n*   If updates to an observable store are not triggering `render()`, make sure you are using Class methods for React lifecycle hooks such as `componentWillMount() {}`, using `componentWillMount = () => {}` will create a property on the instance and cause conflicts with mobx-react.\r\n*   Values provided through `Provider` should be final, to avoid issues like mentioned in [React #2517](https://github.com/facebook/react/issues/2517) and [React #3973](https://github.com/facebook/react/pull/3973), where optimizations might stop the propagation of new context. Instead, make sure that if you put things in `context` that might change over time, that they are `@observable` or provide some other means to listen to changes, like callbacks. However, if your stores will change over time, like an observable value of another store, MobX will warn you. To suppress that warning explicitly, you can use `suppressChangedStoreWarning={true}` as a prop at your own risk.\r\n*   When using both `@inject` and `@observer`, make sure to apply them in the correct order: `observer` should be the inner decorator, `inject` the outer. There might be additional decorators in between.\r\n*   The original component wrapped by `inject` is available as the `wrappedComponent` property of the created higher order component.\r\n*   For mounted component instances, the wrapped component instance is available through the `wrappedInstance` property (except for stateless components).\r\n\r\n#### Inject as function\r\n\r\nThe above example in ES5 would start like:\r\n\r\n```javascript\r\nvar Button = inject(\"color\")(\r\n    observer(\r\n        React.createClass({\r\n            /* ... etc ... */\r\n        })\r\n    )\r\n)\r\n```\r\n\r\nA functional stateless component would look like:\r\n\r\n```javascript\r\nvar Button = inject(\"color\")(\r\n    observer(({ color }) => {\r\n        /* ... etc ... */\r\n    })\r\n)\r\n```\r\n\r\n#### Customizing inject\r\n\r\nInstead of passing a list of store names, it is also possible to create a custom mapper function and pass it to inject.\r\nThe mapper function receives all stores as argument, the properties with which the components are invoked and the context, and should produce a new set of properties,\r\nthat are mapped into the original:\r\n\r\n`mapperFunction: (allStores, props, context) => additionalProps`\r\n\r\nSince version 4.0 the `mapperFunction` itself is tracked as well, so it is possible to do things like:\r\n\r\n```javascript\r\nconst NameDisplayer = ({ name }) => <h1>{name}</h1>\r\n\r\nconst UserNameDisplayer = inject(stores => ({\r\n    name: stores.userStore.name\r\n}))(NameDisplayer)\r\n\r\nconst user = mobx.observable({\r\n    name: \"Noa\"\r\n})\r\n\r\nconst App = () => (\r\n    <Provider userStore={user}>\r\n        <UserNameDisplayer />\r\n    </Provider>\r\n)\r\n\r\nReactDOM.render(<App />, document.body)\r\n```\r\n\r\n_N.B. note that in this *specific* case neither `NameDisplayer` nor `UserNameDisplayer` needs to be decorated with `observer`, since the observable dereferencing is done in the mapper function_\r\n\r\n#### Using `propTypes` and `defaultProps` and other static properties in combination with `inject`\r\n\r\nInject wraps a new component around the component you pass into it.\r\nThis means that assigning a static property to the resulting component, will be applied to the HoC, and not to the original component.\r\nSo if you take the following example:\r\n\r\n```javascript\r\nconst UserName = inject(\"userStore\")(({ userStore, bold }) => someRendering())\r\n\r\nUserName.propTypes = {\r\n    bold: PropTypes.boolean.isRequired,\r\n    userStore: PropTypes.object.isRequired // will always fail\r\n}\r\n```\r\n\r\nThe above propTypes are incorrect, `bold` needs to be provided by the caller of the `UserName` component and is checked by React.\r\nHowever, `userStore` does not need to be required! Although it is required for the original stateless function component, it is not\r\nrequired for the resulting inject component. After all, the whole point of that component is to provide that `userStore` itself.\r\n\r\nSo if you want to make assertions on the data that is being injected (either stores or data resulting from a mapper function), the propTypes\r\nshould be defined on the _wrapped_ component. Which is available through the static property `wrappedComponent` on the inject component:\r\n\r\n```javascript\r\nconst UserName = inject(\"userStore\")(({ userStore, bold }) => someRendering())\r\n\r\nUserName.propTypes = {\r\n    bold: PropTypes.boolean.isRequired // could be defined either here ...\r\n}\r\n\r\nUserName.wrappedComponent.propTypes = {\r\n    // ... or here\r\n    userStore: PropTypes.object.isRequired // correct\r\n}\r\n```\r\n\r\nThe same principle applies to `defaultProps` and other static React properties.\r\nNote that it is not allowed to redefine `contextTypes` on `inject` components (but is possible to define it on `wrappedComponent`)\r\n\r\nFinally, mobx-react will automatically move non React related static properties from wrappedComponent to the inject component so that all static fields are\r\nactually available to the outside world without needing `.wrappedComponent`.\r\n\r\n#### Strongly typing inject\r\n\r\n##### With TypeScript\r\n\r\n`inject` also accepts a function (`(allStores, nextProps, nextContext) => additionalProps`) that can be used to pick all the desired stores from the available stores like this.\r\nThe `additionalProps` will be merged into the original `nextProps` before being provided to the next component.\r\n\r\n```typescript\r\nimport { IUserStore } from \"myStore\"\r\n\r\n@inject(allStores => ({\r\n    userStore: allStores.userStore as IUserStore\r\n}))\r\nclass MyComponent extends React.Component<{ userStore?: IUserStore; otherProp: number }, {}> {\r\n    /* etc */\r\n}\r\n```\r\n\r\nMake sure to mark `userStore` as an optional property. It should not (necessarily) be passed in by parent components at all!\r\n\r\nNote: If you have strict null checking enabled, you could muffle the nullable type by using the `!` operator:\r\n\r\n```\r\npublic render() {\r\n   const {a, b} = this.store!\r\n   // ...\r\n}\r\n```\r\n\r\n##### With Flow\r\n\r\nCurrently, there is a community-discussion around the best way to use `inject` with Flow. Join the discussion at [this gist](https://gist.github.com/vonovak/29c972c6aa9efbb7d63a6853d021fba9).\r\n\r\n#### Testing store injection\r\n\r\nIt is allowed to pass any declared store in directly as a property as well. This makes it easy to set up individual component tests without a provider.\r\n\r\nSo if you have in your app something like:\r\n\r\n```javascript\r\n<Provider profile={profile}>\r\n    <Person age={\"30\"} />\r\n</Provider>\r\n```\r\n\r\nIn your test you can easily test the `Person` component by passing the necessary store as prop directly:\r\n\r\n```\r\nconst profile = new Profile()\r\nconst mountedComponent = mount(\r\n   <Person age={'30'} profile={profile} />\r\n)\r\n```\r\n\r\nBear in mind that using shallow rendering won't provide any useful results when testing injected components; only the injector will be rendered.\r\nTo test with shallow rendering, instantiate the `wrappedComponent` instead: `shallow(<Person.wrappedComponent />)`\r\n\r\n### disposeOnUnmount(componentInstance, propertyKey | function | function[])\r\n\r\nFunction (and decorator) that makes sure a function (usually a disposer such as the ones returned by `reaction`, `autorun`, etc.) is automatically executed as part of the componentWillUnmount lifecycle event.\r\n\r\n```javascript\r\nimport { disposeOnUnmount } from \"mobx-react\"\r\n\r\nclass SomeComponent extends React.Component {\r\n    // decorator version\r\n    @disposeOnUnmount\r\n    someReactionDisposer = reaction(...)\r\n\r\n    // function version over properties\r\n    someReactionDisposer = disposeOnUnmount(this, reaction(...))\r\n\r\n    // function version inside methods\r\n    componentDidMount() {\r\n        // single function\r\n        disposeOnUnmount(this, reaction(...))\r\n\r\n        // or function array\r\n        disposeOnUmount(this, [\r\n            reaction(...),\r\n            reaction(...)\r\n        ])\r\n    }\r\n}\r\n```\r\n\r\n## FAQ\r\n\r\n**Should I use `observer` for each component?**\r\n\r\nYou should use `observer` on every component that displays observable data.\r\nEven the small ones. `observer` allows components to render independently from their parent and in general this means that\r\nthe more you use `observer`, the better the performance become.\r\nThe overhead of `observer` itself is negligible.\r\nSee also [Do child components need `@observer`?](https://github.com/mobxjs/mobx/issues/101)\r\n\r\n**I see React warnings about `forceUpdate` / `setState` from React**\r\n\r\nThe following warning will appear if you trigger a re-rendering between instantiating and rendering a component:\r\n\r\n```\r\nWarning: forceUpdate(...): Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.`\r\n```\r\n\r\n-- or --\r\n\r\n```\r\nWarning: setState(...): Cannot update during an existing state transition (such as within `render` or another component's constructor). Render methods should be a pure function of props and state; constructor side-effects are an anti-pattern, but can be moved to `componentWillMount`.\r\n```\r\n\r\nUsually this means that (another) component is trying to modify observables used by this components in their `constructor` or `getInitialState` methods.\r\nThis violates the React Lifecycle, `componentWillMount` should be used instead if state needs to be modified before mounting.\r\n\r\n## Internal DevTools Api\r\n\r\n### trackComponents()\r\n\r\nEnables the tracking from components. Each rendered reactive component will be added to the `componentByNodeRegistery` and its renderings will be reported through the `renderReporter` event emitter.\r\n\r\n### renderReporter\r\n\r\nEvent emitter that reports render timings and component destructions. Only available after invoking `trackComponents()`.\r\nNew listeners can be added through `renderReporter.on(function(data) { /* */ })`.\r\n\r\nData will have one of the following formats:\r\n\r\n```javascript\r\n{\r\n    event: 'render',\r\n    renderTime: /* time spend in the .render function of a component, in ms. */,\r\n    totalTime: /* time between starting a .render and flushing the changes to the DOM, in ms. */,\r\n    component: /* component instance */,\r\n    node: /* DOM node */\r\n}\r\n```\r\n\r\n```javascript\r\n{\r\n    event: 'destroy',\r\n    component: /* component instance */,\r\n    node: /* DOM Node */\r\n}\r\n```\r\n\r\n### componentByNodeRegistery\r\n\r\nWeakMap. Its `get` function returns the associated reactive component of the given node. The node needs to be precisely the root node of the component.\r\nThis map is only available after invoking `trackComponents`.\r\n\r\n### Debugging reactions with trace\r\n\r\nUsing Mobx.trace() inside a React render function will print out the observable that triggered the change. See [the mobx trace docs](https://mobx.js.org/best/trace.html) for more information.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mobxjs/mobx-react.git"
  },
  "scripts": {
    "build": "node build-rollup.js && shx cp src/index.d.ts index.d.ts && shx cp src/index.d.ts native.d.ts && shx cp src/index.d.ts custom.d.ts",
    "prettier": "prettier --write \"**/*.js\" \"**/*.ts\"",
    "test": "jest && npm run test:ts",
    "test:travis": "npm run build && jest && npm run test:ts",
    "test:ts": "tsc -p test/ts",
    "watch": "jest --watch"
  },
  "typings": "index",
  "version": "5.4.3"
}
